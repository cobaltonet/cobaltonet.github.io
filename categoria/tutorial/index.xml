<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Tutorial on Cobalto.net</title>
        <link>/categoria/tutorial/</link>
        <description>Recent content in Tutorial on Cobalto.net</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>pt-br</language>
        <lastBuildDate>Thu, 19 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="/categoria/tutorial/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Executando testes antes de um Commit</title>
        <link>/artigo/executando-testes-antes-commit/</link>
        <pubDate>Thu, 19 Nov 2020 00:00:00 +0000</pubDate>
        
        <guid>/artigo/executando-testes-antes-commit/</guid>
        <description>&lt;img src="/artigo/executando-testes-antes-commit/git_header.jpg" alt="Featured image of post Executando testes antes de um Commit" /&gt;&lt;p&gt;Esquecer de atualizar testes √© sempre um problema, perceber que eles quebraram s√≥ quando as git actions reclamam durante um PR √© ainda pior üòÖ&lt;/p&gt;
&lt;p&gt;A melhor forma de evitar que isso aconte√ßa √© agir &lt;em&gt;&lt;strong&gt;preemptivamente&lt;/strong&gt;&lt;/em&gt; e executarmos os testes sempre que formos fazer um commit, mas confiar na mem√≥ria e no Visual Studio (been there, done that) n√£o √© 100% seguro, portanto precisamos automatizar.&lt;/p&gt;
&lt;h2 id=&#34;entram-em-cena-os-git-hooks&#34;&gt;Entram em cena os git hooks&lt;/h2&gt;

  &lt;img src=&#34;git_hooks_windows.png&#34;  alt=&#34;hooks iniciais&#34;  class=&#34;left&#34;  style=&#34;float: right; margin-left: 15px;&#34;  /&gt;


&lt;p&gt;O git possui uma feature chamada hooks que permite a execu√ß√£o de tarefas automatizadas baseadas em scripts em determinados momentos durante o fluxo de trabalho no git, esses scripts se encontram em &lt;code&gt;.git\hooks\&lt;/code&gt; dentro da pasta de cada reposit√≥rio (exemplo: &lt;code&gt;C:\repos\core\.git\hooks&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Esta pasta inicialmente ir√° conter um conjunto de hooks de exemplo, todos nomeados com &lt;code&gt;.sample&lt;/code&gt; ao fim do nome do arquivo. Para utilizar um hook, remova o &lt;code&gt;.sample&lt;/code&gt; do nome do arquivo, ele dever√° ficar &lt;strong&gt;sem&lt;/strong&gt; extens√£o, e altere seu conte√∫do.&lt;/p&gt;
&lt;p&gt;Para criarmos um hook que seja executado antes de cada commit (local), vamos remover o &lt;code&gt;.sample&lt;/code&gt; do arquivo &lt;code&gt;pre-commit.sample&lt;/code&gt; e em seguida editar seu conte√∫do.&lt;/p&gt;
&lt;p&gt;Para executarmos testes, vamos utilizar o comando: &lt;code&gt;dotnet test &amp;quot;caminho do projeto&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Cada hook √© composto por um script escrito em qualquer linguagem, framework ou ferramenta que seja execut√°vel no computador disparando o trigger em quest√£o. O ponto importante a se lembrar √© que um hook espera uma sa√≠da &lt;code&gt;0 (zero)&lt;/code&gt; para sucesso e qualquer outro valor para falha.&lt;/p&gt;
&lt;p&gt;Ent√£o, de forma bem simples, temos o seguinte script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# !/bin/sh&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Running tests before commit...&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; dotnet &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;./CobaltoCore/Cobalto.Core.Tests/Cobalto.Core.Tests.csproj&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;No script acima o comando &lt;code&gt;exec dotnet test (...)&lt;/code&gt; executa os testes do projeto &lt;code&gt;Cobalto.Core.Tests.csproj&lt;/code&gt; e retorna 0 em caso de sucesso e 1 em caso de erro, exatamente como o git hook espera e portanto nenhuma outra valida√ß√£o √© necess√°ria.&lt;/p&gt;
&lt;p&gt;Arquivo salvo, ao tentar executar um commit o esperado √© que o mesmo ocorra normalmente com a √∫nica diferen√ßa sendo o tempo levado para o comando executar, afinal agora todos os testes ir√£o rodar em background antes do commit ser de fato executado.&lt;/p&gt;
&lt;p&gt;Caso algum teste falhe o retorno ser√° negativo e com isso o commit nunca √© executado.
Mas n√£o se preocupe, voc√™ receber√° uma mensagem ao fim da opera√ß√£o no terminal.&lt;/p&gt;
&lt;h3 id=&#34;mas-e-no-visual-studio-porque-eu-n√£o-sei-usar-o-terminal-&#34;&gt;Mas e no Visual Studio? (porque eu n√£o sei usar o terminal ü§°)&lt;/h3&gt;
&lt;p&gt;O git hook √© uma feature do git, portanto ele vai ser executado antes do commit da mesma forma quando chamado pelo Visual Studio.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;At√© o momento que escrevo esse tutorial realmente falta uma mensagem minimamente informativa no Visual Studio &lt;em&gt;(ele ir√° exibir apenas um erro caso algum teste falhe)&lt;/em&gt;, vou verificar se isso pode ser resolvido e atualizo essa p√°gina com os resultados. √â que eu uso o terminal üòÖ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Pronto, seus commits agora requerem sucesso em todos os testes para serem processados.&lt;/p&gt;
&lt;p&gt;Lembrando: Tudo descrito aqui √© referente ao reposit√≥rio local assim como a execu√ß√£o dos testes, isso n√£o substitui nem burla as valida√ß√µes de qualidade configuradas no seu reposit√≥rio remoto üêôüê±&lt;/p&gt;
&lt;h3 id=&#34;n√£o-esque√ßa-de-alterar-o-caminho-do-projeto-de-testes&#34;&gt;N√£o esque√ßa de alterar o caminho do projeto de testes.&lt;/h3&gt;
&lt;p&gt;Lembre que o script aceita qualquer comando v√°lido, ent√£o voc√™ pode estender para v√°rios projetos de testes e virtualmente qualquer outro processo antes da execu√ß√£o do commit.&lt;/p&gt;
&lt;h2 id=&#34;one-more-thing&#34;&gt;One more thing!&lt;/h2&gt;
&lt;p&gt;Voc√™ lembra como se desfaz commits locais? Pois √©, nem eu. (spoiler: &lt;code&gt;git reset HEAD^&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;Eu sempre acabo tendo que procurar na internet esse comando chato quando por acidente üëÄ acabo commitando aquele &lt;code&gt;appsettings.json&lt;/code&gt; ou qualquer outra altera√ß√£o feita exclusivamente para testes locais.&lt;/p&gt;
&lt;p&gt;Pra isso eu criei um alias chamado &lt;code&gt;uncommit&lt;/code&gt; que funciona da seguinte forma:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# !/bin/sh&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git uncommit
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Sim, √© s√≥ isso.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Para definir o alias &lt;code&gt;uncommit&lt;/code&gt; voc√™ pode seguir de duas formas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Executando diretamente no terminal&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# !/bin/sh&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git config --global alias.uncommit &lt;span class=&#34;s2&#34;&gt;&amp;#34;reset HEAD^&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Editando o arquivo .gitconfig do seu usu√°rio e adicionado um alias&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# .gitconfig&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;user&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Daniel Cobalto
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;email&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; cobalto@users.noreply.github.com
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;alias&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;uncommit&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; reset HEAD^
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Agora voc√™ pode &lt;code&gt;uncommitar&lt;/code&gt; seus commits com um comando simples e f√°cil de lembrar.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Disclaimer: Esse texto foi escrito originalmente para a documenta√ß√£o interna que mantemos na empresa em que trabalho, mas como n√£o existe nada sigiloso nele estou compartilhando aqui tamb√©m üòä&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        
    </channel>
</rss>
